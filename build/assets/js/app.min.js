var MLPModule,
  slice = [].slice;

$.mlpFnName = function(fn) {
  return fn.name || (fn + '').split(/\s|\(/)[1];
};

$.mlpInit = function(fn, name, set) {
  if (set == null) {
    set = true;
  }
  window.MLP = window.MLP || {};
  window.MLP.apps = window.MLP.apps || {};
  window.MLP.instances = window.MLP.instances || {};
  window.MLP.config = window.MLP.config || {};
  if (fn && set) {
    name = name || $.mlpFnName(fn);
    return window.MLP.apps[name] = fn;
  } else {
    return window.MLP.apps[fn];
  }
};

$.mlpPlugin = function(fn, name, bypass, elPluggin) {
  var obj;
  if (bypass == null) {
    bypass = false;
  }
  if (elPluggin == null) {
    elPluggin = true;
  }
  obj = {};
  $.mlpInit(fn, name);
  name = name || $.mlpFnName(fn);
  obj[name] = function() {
    var args, option;
    option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    this.each(function() {
      var $this, data, key;
      $this = $(this);
      key = 'mlp-' + name;
      data = $this.data(key);
      if (!data || bypass) {
        $this.data('name', name);
        $this.data(key, (data = new fn(option, this)));
      }
      if (typeof option === 'string') {
        return data[option].apply(data, args);
      }
    });
  };
  $.fn.extend(obj);
  if (!elPluggin) {
    obj[name] = function(option) {
      return new fn(option);
    };
    return $.extend(obj);
  }
};

MLPModule = (function() {
  MLPModule.prototype.defaults = {};

  function MLPModule(options, element) {
    this.ops = $.extend({}, this.defaults, options);
    this.sel = this.sel || {};
    this.el = this.el || {};
    this.el.target = $(element);
    this.init();
  }

  MLPModule.prototype.init = function() {
    this.classes = {
      active: 'is-active',
      offscreen: 'l-offscreen'
    };
    this.keys = {
      esc: 27,
      down: 40,
      up: 38,
      left: 37,
      right: 39,
      o: 79,
      space: 32,
      tab: 9,
      enter: 13
    };
    this.aria = {
      expanded: 'aria-expanded',
      hidden: 'aria-hidden',
      controls: 'aria-controls',
      selected: 'aria-selected',
      invalid: 'aria-invalid',
      pressed: 'aria-pressed',
      described: 'aria-describedby',
      checked: 'aria-checked',
      label: 'aria-label',
      labelled: 'aria-labelledby',
      popup: 'aria-haspopup'
    };
    return this.attr = {
      tabindex: 'tabindex'
    };
  };

  MLPModule.prototype.stop = function(e) {
    e.preventDefault();
    return e.stopPropagation();
  };

  MLPModule.prototype.target = function(e) {
    return $(e.target);
  };

  MLPModule.prototype.currentTarget = function(e) {
    return $(e.currentTarget);
  };

  MLPModule.prototype.isEnter = function(e) {
    return this.keycode(e) === this.keys.enter;
  };

  MLPModule.prototype.isSpace = function(e) {
    return this.keycode(e) === this.keys.space;
  };

  MLPModule.prototype.isTab = function(e) {
    return this.keycode(e) === this.keys.tab;
  };

  MLPModule.prototype.isBackTab = function(e) {
    return e.shiftKey && this.isTab(e);
  };

  MLPModule.prototype.isEsc = function(e) {
    return this.keycode(e) === this.keys.esc;
  };

  MLPModule.prototype.isEnterOrSpace = function(e) {
    return this.isEnter(e) || this.isSpace(e);
  };

  MLPModule.prototype.keycode = function(e) {
    return e.which;
  };

  MLPModule.prototype.isIE = function(version) {
    if (version == null) {
      version = 8;
    }
    return bowser.msie && bowser.version === version;
  };

  return MLPModule;

})();

$.mlpInit(MLPModule, 'MLPModule');

var AudioButton,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AudioButton = (function(superClass) {
  extend(AudioButton, superClass);

  function AudioButton() {
    return AudioButton.__super__.constructor.apply(this, arguments);
  }

  AudioButton.prototype.init = function() {
    AudioButton.__super__.init.call(this);
    return this.events();
  };

  AudioButton.prototype.events = function() {
    var $audioOpen, music, playBtn;
    playBtn = this.el.target;
    music = document.getElementById('bgMusic');
    $audioOpen = $('.c-nav__btn-audio');
    return playBtn.click(function() {
      if (playBtn.hasClass('play')) {
        music.pause();
        return $audioOpen.toggleClass('play');
      } else {
        music.play();
        return $audioOpen.toggleClass('play');
      }
    });
  };

  return AudioButton;

})(MLP.apps.MLPModule);

$.mlpPlugin(AudioButton, 'AudioButton', true);


/*
  Exchanges a background based on mouse over via JS. 
  (Useful for CMS type sites which need to control background images.)
  Usage: div(data-js-bg-exchange='$url', data-bg-active='$url2')
 */
var BgExchange,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BgExchange = (function(superClass) {
  extend(BgExchange, superClass);

  function BgExchange() {
    return BgExchange.__super__.constructor.apply(this, arguments);
  }

  BgExchange.prototype.init = function() {
    BgExchange.__super__.init.call(this);
    this.events();
    return this.exchangeBg(this.getDefaultBg());
  };

  BgExchange.prototype.events = function() {
    this.el.target.on('mouseenter', (function(_this) {
      return function(e) {
        return _this.activeBackground();
      };
    })(this));
    return this.el.target.on('mouseout', (function(_this) {
      return function(e) {
        return _this.inactiveBackground();
      };
    })(this));
  };

  BgExchange.prototype.inactiveBackground = function() {
    return this.exchangeBg(this.getDefaultBg());
  };

  BgExchange.prototype.activeBackground = function() {
    return this.exchangeBg(this.el.target.data('bg-active'));
  };

  BgExchange.prototype.getDefaultBg = function() {
    return this.el.target.data('js-bg-exchange');
  };

  BgExchange.prototype.exchangeBg = function(bg) {
    return this.el.target.css('background-image', 'url(' + bg + ')');
  };

  return BgExchange;

})(MLP.apps.MLPModule);

$.mlpPlugin(BgExchange, 'BgExchange', true);


/*
  Loads backgrounds via JS. (Useful for CMS type sites which need to control background images.)
  Usage: div(data-js-bg-loader='$url', data-background-mobile='$url2')
 */
var BgLoader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BgLoader = (function(superClass) {
  extend(BgLoader, superClass);

  function BgLoader() {
    return BgLoader.__super__.constructor.apply(this, arguments);
  }

  BgLoader.prototype.defaults = {
    screen: {
      mobile: MLP.config.mobile || 750
    },
    bg: {}
  };

  BgLoader.prototype.init = function() {
    $(window).bind('resize orientationchange', (function(_this) {
      return function(e) {
        return _this.setBackground();
      };
    })(this));
    return this.setBackground();
  };

  BgLoader.prototype.getEl = function() {
    var selector;
    selector = this.el.target.data('bg-selector');
    if (selector) {
      return $(selector);
    } else {
      return this.el.target;
    }
  };

  BgLoader.prototype.setBackground = function() {
    var bg;
    if ($(window).width() <= this.ops.screen.mobile) {
      bg = this.getBackground('background-mobile');
    }
    if (!bg) {
      bg = this.getBackground();
    }
    if (bg) {
      return this.getEl().css({
        'background-image': "url('" + bg + "')"
      });
    }
  };

  BgLoader.prototype.getBackground = function(key) {
    var bg;
    if (key == null) {
      key = 'js-bg-loader';
    }
    bg = this.el.target.data(key);
    if (bg) {
      return bg;
    } else {
      return this.ops.bg[key];
    }
  };

  return BgLoader;

})(MLP.apps.MLPModule);

$.mlpPlugin(BgLoader, 'BgLoader', true);

var ChangePage,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ChangePage = (function(superClass) {
  extend(ChangePage, superClass);

  function ChangePage() {
    return ChangePage.__super__.constructor.apply(this, arguments);
  }

  ChangePage.prototype.init = function() {
    ChangePage.__super__.init.call(this);
    this.el.changeBtn = $('.js-change-button');
    this.el.openPage = $('.js-change-page');
    return this.events();
  };

  ChangePage.prototype.events = function() {
    var _this, blockWidth, num;
    num = this.el.changeBtn.length;
    blockWidth = 100 / num + '%';
    this.el.changeBtn.css('width', blockWidth);
    _this = this;
    return this.el.changeBtn.click(function() {
      var i;
      i = _this.el.changeBtn.index(this);
      _this.el.changeBtn.removeClass(_this.classes.active);
      _this.el.openPage.removeClass(_this.classes.active);
      _this.el.changeBtn.eq(i).addClass(_this.classes.active);
      return _this.el.openPage.eq(i).addClass(_this.classes.active);
    });
  };

  return ChangePage;

})(MLP.apps.MLPModule);

$.mlpPlugin(ChangePage, 'ChangePage', true);

$(document).ready(function() {
  $('[data-js-owlcarousel]').OwlCarousel();
  $('[data-js-owlcarousel-popup]').OwlCarouselPopup();
  $('[data-js-owlcarousel-auto]').OwlCarouselAuto();
  $('[data-js-owlcarousel-list]').OwlCarouselList();
  $('[data-js-audio]').AudioButton();
  $('[data-js-change-page]').ChangePage();
  $('[data-js-mobile-menu]').MobileMenu();
  $('[data-js-events-popup]').EventsPopup();
  $('[data-js-gallery-popup]').GalleryPopup();
  $('[data-js-scroll-load]').ScrollLoad();
  $('[data-js-navigation]').Navigation();
  $('[data-js-language-change]').LanguageChange();
  $('[data-js-join-us]').JoinUs();
  $('[data-js-join-form]').JoinForm();
  return $('[data-js-wechat]').WeChat();
});

var EventsPopup,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventsPopup = (function(superClass) {
  var stopPropagation;

  extend(EventsPopup, superClass);

  function EventsPopup() {
    return EventsPopup.__super__.constructor.apply(this, arguments);
  }

  EventsPopup.prototype.init = function() {
    EventsPopup.__super__.init.call(this);
    this.el.openBtn = this.el.target.find('.js-btn-open');
    this.el.closeBtn = this.el.target.find('.js-btn-close');
    this.el.block = this.el.target.find('.c-events__popup');
    return this.events();
  };

  EventsPopup.prototype.events = function() {
    var _this, popupSlider;
    _this = this;
    popupSlider = $('.c-events__popup--slider .owl-carousel');
    this.el.openBtn.click(function() {
      var index;
      index = _this.el.openBtn.index(this);
      return popupSlider.trigger('owl.jumpTo', index);
    });
    this.el.openBtn.click((function(_this) {
      return function() {
        return _this.el.block.addClass(_this.classes.active);
      };
    })(this));
    this.el.closeBtn.click((function(_this) {
      return function() {
        return _this.el.block.removeClass(_this.classes.active);
      };
    })(this));
    $('.c-events__popup .owl-carousel').click(function(e) {
      return stopPropagation(e);
    });
    return this.el.block.click(function() {
      return $('.c-events__popup').removeClass('is-active');
    });
  };

  stopPropagation = function(e) {
    if (e.stopPropagation) {
      e.stopPropagation();
    } else {
      e.cancelBubble = true;
    }
  };

  return EventsPopup;

})(MLP.apps.MLPModule);

$.mlpPlugin(EventsPopup, 'EventsPopup', true);

var GalleryPopup,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GalleryPopup = (function(superClass) {
  var stopPropagation;

  extend(GalleryPopup, superClass);

  function GalleryPopup() {
    return GalleryPopup.__super__.constructor.apply(this, arguments);
  }

  GalleryPopup.prototype.init = function() {
    GalleryPopup.__super__.init.call(this);
    this.el.openBtn = this.el.target.find('.js-btn-open');
    this.el.closeBtn = this.el.target.find('.js-btn-close');
    this.el.block = this.el.target.find('.c-photo__popup');
    return this.events();
  };

  GalleryPopup.prototype.events = function() {
    var _this, popupSlider;
    _this = this;
    popupSlider = $('.c-photo__popup--slider .owl-carousel');
    this.el.openBtn.click(function() {
      var index;
      index = _this.el.openBtn.index(this);
      return popupSlider.trigger('owl.jumpTo', index);
    });
    this.el.openBtn.click((function(_this) {
      return function() {
        return _this.el.block.addClass(_this.classes.active);
      };
    })(this));
    this.el.closeBtn.click((function(_this) {
      return function() {
        return _this.el.block.removeClass(_this.classes.active);
      };
    })(this));
    $('.c-photo__popup .owl-carousel').click(function(e) {
      return stopPropagation(e);
    });
    return this.el.block.click(function() {
      return $('.c-photo__popup').removeClass('is-active');
    });
  };

  stopPropagation = function(e) {
    if (e.stopPropagation) {
      e.stopPropagation();
    } else {
      e.cancelBubble = true;
    }
  };

  return GalleryPopup;

})(MLP.apps.MLPModule);

$.mlpPlugin(GalleryPopup, 'GalleryPopup', true);


/*
  Auto formats phone/fax number for mobile.
  Usage:
    a(data-js-intent='tel:0354618432', href='#') 03-5461-8432
    meta(name='format-detection', content='telephone=no')
 */
var Intent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Intent = (function(superClass) {
  extend(Intent, superClass);

  function Intent() {
    return Intent.__super__.constructor.apply(this, arguments);
  }

  Intent.prototype.defaults = {
    screen: {
      mobile: MLP.config.mobile || 767
    }
  };

  Intent.prototype.init = function() {
    Intent.__super__.init.call(this);
    this.events();
    return this.format();
  };

  Intent.prototype.events = function() {
    return $(window).bind('resize orientationchange', (function(_this) {
      return function(e) {
        return _this.format();
      };
    })(this));
  };

  Intent.prototype.contains = function(haystack) {
    return this.intent.indexOf(haystack) > -1;
  };

  Intent.prototype.formatFax = function() {
    var $anchors;
    $anchors = this.el.target.find('a');
    if ($anchors.length) {
      $anchors.addClass('link-fax');
      return $anchors.removeAttr('href');
    }
  };

  Intent.prototype.formatPhone = function() {
    if (this.width <= this.ops.screen.mobile) {
      return this.el.target.attr('href', this.intent);
    } else {
      return this.el.target.removeAttr('href');
    }
  };

  Intent.prototype.format = function() {
    this.width = $(window).width();
    this.intent = this.el.target.data('js-intent');
    if (this.intent) {
      if (this.contains('tel')) {
        this.formatPhone();
      }
      if (this.contains('fax')) {
        return this.formatFax();
      }
    }
  };

  return Intent;

})(MLP.apps.MLPModule);

$.mlpPlugin(Intent, 'Intent', true);

var JoinForm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

JoinForm = (function(superClass) {
  var placeholder, validateForm;

  extend(JoinForm, superClass);

  function JoinForm() {
    return JoinForm.__super__.constructor.apply(this, arguments);
  }

  JoinForm.prototype.init = function() {
    JoinForm.__super__.init.call(this);
    this.el.joinF = this.el.target;
    this.el.formSubmit = this.el.target.find("#info-check-submit");
    return this.events();
  };

  JoinForm.prototype.events = function() {
    var age, country, email, experience, img, level, name, nationality, phone, supportPlaceholder;
    img = $('#upload_file_1');
    name = $("input[name='name']");
    age = $("input[name='age']");
    nationality = $("input[name='nationality']");
    level = $("input[name='education']");
    phone = $("input[name='phone']");
    email = $("input[name='email']");
    country = $("input[name='country']");
    experience = $("textarea[name='experience']");
    this.el.formSubmit.click(function() {
      return validateForm();
    });
    img.blur(function() {
      img.parent('.form-field').removeClass('null');
      if (img.val() === '') {
        return img.parent('.form-field').addClass('n-invalid');
      } else {
        return img.parent('.form-field').removeClass('n-invalid');
      }
    });
    name.blur(function() {
      name.parent('.form-field').removeClass('null');
      if (name.val() === '') {
        return name.parent('.form-field').addClass('n-invalid');
      } else {
        return name.parent('.form-field').removeClass('n-invalid');
      }
    });
    nationality.blur(function() {
      nationality.parent('.form-field').removeClass('null');
      if (nationality.val() === '') {
        return nationality.parent('.form-field').addClass('n-invalid');
      } else {
        return nationality.parent('.form-field').removeClass('n-invalid');
      }
    });
    level.blur(function() {
      level.parent('.form-field').removeClass('null');
      if (level.val() === '') {
        return level.parent('.form-field').addClass('n-invalid');
      } else {
        return level.parent('.form-field').removeClass('n-invalid');
      }
    });
    country.blur(function() {
      country.parent('.form-field').removeClass('null');
      if (country.val() === '') {
        return country.parent('.form-field').addClass('n-invalid');
      } else {
        return country.parent('.form-field').removeClass('n-invalid');
      }
    });
    experience.blur(function() {
      experience.parent('.form-field').removeClass('null');
      if (experience.val() === '') {
        return experience.parent('.form-field').addClass('n-invalid');
      } else {
        return experience.parent('.form-field').removeClass('n-invalid');
      }
    });
    age.blur(function() {
      var t, z;
      age.parent('.form-field').removeClass('null');
      t = age.val();
      z = /^[0-9]*$/;
      if (!z.test(t)) {
        return age.parent('.form-field').addClass('n-invalid');
      } else if (t === '') {
        return age.parent('.form-field').addClass('n-invalid');
      } else {
        return age.parent('.form-field').removeClass('n-invalid');
      }
    });
    phone.blur(function() {
      var t, z;
      phone.parent('.form-field').removeClass('null');
      t = phone.val();
      z = /^([0-9-]+)$/;
      if (!z.test(t)) {
        return phone.parent('.form-field').addClass('n-invalid');
      } else if (t === '') {
        return phone.parent('.form-field').addClass('n-invalid');
      } else {
        return phone.parent('.form-field').removeClass('n-invalid');
      }
    });
    email.blur(function() {
      var t, z;
      email.parent('.form-field').removeClass('null');
      t = email.val();
      z = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
      if (!z.test(t)) {
        return email.parent('.form-field').addClass('n-invalid');
      } else if (t === '') {
        return email.parent('.form-field').addClass('n-invalid');
      } else {
        return email.parent('.form-field').removeClass('n-invalid');
      }
    });
    $('.c-result__popup').click(function() {
      if (!$('.c-result__popup .c-result__popup--loading').hasClass('is-active')) {
        return $('.c-result__popup').removeClass('is-active');
      }
    });
    supportPlaceholder = 'placeholder' in document.createElement('input');
    if (!supportPlaceholder) {
      $('input').each(function() {
        var text;
        text = $(this).attr('placeholder');
        if ($(this).attr('type') === 'text' || $(this).attr('type') === 'email') {
          placeholder($(this));
        }
      });
      $('textarea').each(function() {
        var text;
        text = $(this).attr('placeholder');
        placeholder($(this));
      });
    }
  };

  validateForm = function() {
    var $error, $loading, $popup, $success, formData, formField, formUrl;
    formField = $('.c-join__form .form-field');
    formField.each(function() {
      if ($(this).hasClass('null')) {
        $(this).removeClass('null').addClass('n-invalid');
      }
    });
    if (formField.hasClass('n-invalid')) {
      return false;
    } else {
      $popup = $('.c-result__popup');
      $loading = $('.c-result__popup .c-result__popup--loading');
      $success = $('.c-result__popup .c-result__popup--success');
      $error = $('.c-result__popup .c-result__popup--error');
      $success.removeClass('is-active');
      $error.removeClass('is-active');
      $loading.addClass('is-active');
      $popup.addClass('is-active');
      setTimeout("", 5000);
      formUrl = $('#join_form').attr('action');
      formData = new FormData();
      formData.append("upload_file-1", $("#upload_file_1")[0].files[0]);
      formData.append("upload_file-2", $("#upload_file_2")[0].files[0]);
      formData.append("upload_cv", $("#upload_cv")[0].files[0]);
      formData.append("name", $("input[name='name']").val());
      formData.append("age", $("input[name='age']").val());
      formData.append("nationality", $("input[name='nationality']").val());
      formData.append("education", $("input[name='education']").val());
      formData.append("phone", $("input[name='phone']").val());
      formData.append("email", $("input[name='email']").val());
      formData.append("country", $("input[name='country']").val());
      formData.append("experience", $("textarea[name='experience']").val());
      $.ajax({
        method: 'POST',
        url: formUrl,
        data: formData,
        contentType: false,
        processData: false,
        error: function(request) {
          $loading.removeClass('is-active');
          return $error.addClass('is-active');
        },
        success: function(data) {
          var info;
          info = data;
          if (info.success) {
            $loading.removeClass('is-active');
            $success.addClass('is-active');
            $('input, textarea').val('');
            $('.c-join__form--update').removeAttr('style');
            $('.c-join__form--update > p').css('display', 'block');
            $('#upload_cv').siblings('.file-path').css('display', 'none');
            $('#upload_cv').siblings('.file-tip').css('display', 'block');
          } else {
            $loading.removeClass('is-active');
            $error.addClass('is-active');
          }
        }
      });
    }
  };

  placeholder = function(input) {
    var defaultValue, text;
    text = input.attr('placeholder');
    defaultValue = input.defaultValue;
    if (!defaultValue) {
      input.val(text).addClass('phcolor');
    }
    input.focus(function() {
      if (input.val() === text) {
        $(this).val('');
      }
    });
    input.blur(function() {
      if (input.val() === '') {
        $(this).val(text).addClass('phcolor');
      }
    });
    input.keydown(function() {
      $(this).removeClass('phcolor');
    });
  };

  return JoinForm;

})(MLP.apps.MLPModule);

$.mlpPlugin(JoinForm, 'JoinForm', true);

var JoinUs,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

JoinUs = (function(superClass) {
  extend(JoinUs, superClass);

  function JoinUs() {
    return JoinUs.__super__.constructor.apply(this, arguments);
  }

  JoinUs.prototype.init = function() {
    JoinUs.__super__.init.call(this);
    this.el.joinForm = this.el.target.find('#join_form');
    this.el.firstImage = this.el.target.find('#upload_file_1');
    this.el.secondImage = this.el.target.find('#upload_file_2');
    this.el.fileCv = this.el.target.find('#upload_cv');
    return this.events();
  };

  JoinUs.prototype.events = function() {
    this.el.firstImage.change(function() {
      var fileName, fileSize, files, lang, name, reader, size;
      name = $('#upload_file_1').val();
      files = !!this.files ? this.files : [];
      if (!files.length || !window.FileReader) {
        $('#upload_file_1').parent().removeAttr('style');
        $('#upload_file_1').siblings('p').css('display', 'block');
        $('#upload_file_1').parent('.form-field').addClass('n-invalid');
        return;
      }
      fileSize = this.files[0].size;
      size = fileSize / 1024;
      if (size > 10000) {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
        if (lang === "zh-CN") {
          alert('请上传小于10M的文件');
        } else {
          alert('Please upload a smaller file (<10 MB).');
        }
        this.val('');
        return;
      }
      fileName = name.substring(name.lastIndexOf(".") + 1).toLowerCase();
      if (fileName !== "png" && fileName !== "jpg" && fileName !== "jpeg" && fileName !== "gif" && fileName !== "bmp") {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
        if (lang === "zh-CN") {
          alert('请上传正确格式的图片文件(bmp, jpg, jpeg, png, gif)');
        } else {
          alert('Upload incorrect format image:\n Please upload correct image file (bmp, jpg, jpeg, png, gif).');
        }
        $('#upload_file_1').val()('');
        return;
      }
      if (/^image/.test(files[0].type)) {
        reader = new FileReader;
        reader.readAsDataURL(files[0]);
        reader.onloadend = function() {
          $('#upload_file_1').parent().css('background-image', 'url(' + this.result + ')');
          $('#upload_file_1').siblings('p').css('display', 'none');
          $('#upload_file_1').parent('.form-field').removeClass('n-invalid');
        };
      }
    });
    this.el.secondImage.change(function() {
      var fileName, fileSize, files, lang, name, reader, size;
      name = $('#upload_file_2').val();
      files = !!this.files ? this.files : [];
      if (!files.length || !window.FileReader) {
        $('#upload_file_2').parent().removeAttr('style');
        $('#upload_file_2').siblings('p').css('display', 'block');
        return;
      }
      fileSize = this.files[0].size;
      size = fileSize / 1024;
      if (size > 10000) {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
        if (lang === "zh-CN") {
          alert('请上传小于10M的文件');
        } else {
          alert('Please upload a smaller file (<10 MB).');
        }
        this.val('');
        return;
      }
      name = $('#upload_file_2').val();
      fileName = name.substring(name.lastIndexOf(".") + 1).toLowerCase();
      if (fileName !== "png" && fileName !== "jpg" && fileName !== "jpeg" && fileName !== "gif" && fileName !== "bmp") {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
        if (lang === "zh-CN") {
          alert('请上传正确格式的图片文件(bmp, jpg, jpeg, png, gif)');
        } else {
          alert('Upload incorrect format image:\n Please upload correct image file (bmp, jpg, jpeg, png, gif).');
        }
        $('#upload_file_2').val()('');
        return;
      }
      if (/^image/.test(files[0].type)) {
        reader = new FileReader;
        reader.readAsDataURL(files[0]);
        reader.onloadend = function() {
          $('#upload_file_2').parent().css('background-image', 'url(' + this.result + ')');
          $('#upload_file_2').siblings('p').css('display', 'none');
          $('#upload_file_2').parent('.form-field').removeClass('n-invalid');
        };
      }
    });
    this.el.fileCv.change(function() {
      var arr, fileN, fileName, filePath, fileSize, lang, name, size;
      filePath = $(this).val();
      fileSize = this.files[0].size;
      size = fileSize / 1024;
      if (size > 10000) {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
        if (lang === "zh-CN") {
          alert('请上传小于10M的文件');
        } else {
          alert('Please upload a smaller file (<10 MB).');
        }
        this.val('');
        return;
      }
      name = $('#upload_cv').val();
      fileN = name.substring(name.lastIndexOf(".") + 1).toLowerCase();
      if (fileN !== "pdf" && fileN !== "doc" && fileN !== "docx") {
        lang = document.getElementsByTagName('html')[0].getAttribute('lang');
        if (lang === "zh-CN") {
          alert('请上传正确格式的文件(pdf, doc, docx)');
        } else {
          alert('Upload incorrect format CV file:\n Please upload correct file (pdf, doc, docx).');
        }
        $('#upload_cv').val()('');
        return;
      }
      arr = filePath.split('\\');
      fileName = arr[arr.length - 1];
      $('#upload_cv').siblings('.file-tip').css('display', 'none');
      $('#upload_cv').siblings('.file-path').css('display', 'block');
      $('#upload_cv').siblings('.file-path').html(fileName);
    });
  };

  return JoinUs;

})(MLP.apps.MLPModule);

$.mlpPlugin(JoinUs, 'JoinUs', true);

var LanguageChange,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LanguageChange = (function(superClass) {
  extend(LanguageChange, superClass);

  function LanguageChange() {
    return LanguageChange.__super__.constructor.apply(this, arguments);
  }

  LanguageChange.prototype.init = function() {
    LanguageChange.__super__.init.call(this);
    this.el.languageBtn = this.el.target.find('a');
    return this.events();
  };

  LanguageChange.prototype.events = function() {
    var _this, en, href, url, zh;
    _this = this;
    url = window.location.host;
    href = window.location.href;
    en = "com";
    zh = "cn";
    return this.el.languageBtn.click((function(_this) {
      return function() {
        var urlLang;
        urlLang = url.substring(url.lastIndexOf(".") + 1).toLowerCase();
        urlLang = urlLang.replace("/", "");
        if (urlLang === en) {
          href = href.replace(urlLang, zh);
          return window.location = href;
        } else if (urlLang === zh) {
          href = href.replace(urlLang, en);
          return window.location = href;
        }
      };
    })(this));
  };

  return LanguageChange;

})(MLP.apps.MLPModule);

$.mlpPlugin(LanguageChange, 'LanguageChange', true);

var MobileMenu,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MobileMenu = (function(superClass) {
  extend(MobileMenu, superClass);

  function MobileMenu() {
    return MobileMenu.__super__.constructor.apply(this, arguments);
  }

  MobileMenu.prototype.init = function() {
    MobileMenu.__super__.init.call(this);
    this.el.openBtn = this.el.target.find('.js-btn-open');
    this.el.closeBtn = this.el.target.siblings('.c-nav__menu').find('.js-btn-close');
    return this.events();
  };

  MobileMenu.prototype.events = function() {
    this.el.openBtn.click((function(_this) {
      return function() {
        return _this.el.target.addClass(_this.classes.active);
      };
    })(this));
    return this.el.closeBtn.click((function(_this) {
      return function() {
        return _this.el.target.removeClass(_this.classes.active);
      };
    })(this));
  };

  return MobileMenu;

})(MLP.apps.MLPModule);

$.mlpPlugin(MobileMenu, 'MobileMenu', true);

var Navigation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Navigation = (function(superClass) {
  extend(Navigation, superClass);

  function Navigation() {
    return Navigation.__super__.constructor.apply(this, arguments);
  }

  Navigation.prototype.init = function() {
    Navigation.__super__.init.call(this);
    this.el.nav = $('.c-nav--desktop');
    this.el.audioBtn = $('.c-nav--mobile .c-nav__btn-audio');
    return this.events();
  };

  Navigation.prototype.events = function() {
    var $window;
    $window = $(window);
    if (document.body.scrollTop > 0) {
      this.el.nav.addClass('is-active');
      this.el.audioBtn.addClass('is-active');
    }
    return $window.scroll((function(_this) {
      return function() {
        var height;
        height = 1;
        if ($window.scrollTop() > height) {
          _this.el.nav.addClass('is-active');
        } else {
          _this.el.nav.removeClass('is-active');
        }
        if ($window.width() <= 750 && $window.scrollTop() > height) {
          return _this.el.audioBtn.addClass('is-active');
        } else {
          return _this.el.audioBtn.removeClass('is-active');
        }
      };
    })(this));
  };

  return Navigation;

})(MLP.apps.MLPModule);

$.mlpPlugin(Navigation, 'Navigation', true);

var OwlCarouselAuto,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OwlCarouselAuto = (function(superClass) {
  extend(OwlCarouselAuto, superClass);

  function OwlCarouselAuto() {
    return OwlCarouselAuto.__super__.constructor.apply(this, arguments);
  }

  OwlCarouselAuto.prototype.init = function() {
    return this.setup();
  };

  OwlCarouselAuto.prototype.setup = function() {
    this.el.target.owlCarousel({
      navigation: true,
      navigationText: ["", ""],
      slideSpeed: 500,
      paginationSpeed: 800,
      singleItem: true,
      autoPlay: 5000,
      stopOnHover: true
    });
  };

  return OwlCarouselAuto;

})(MLP.apps.MLPModule);

$.mlpPlugin(OwlCarouselAuto, 'OwlCarouselAuto', true);

var OwlCarouselList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OwlCarouselList = (function(superClass) {
  extend(OwlCarouselList, superClass);

  function OwlCarouselList() {
    return OwlCarouselList.__super__.constructor.apply(this, arguments);
  }

  OwlCarouselList.prototype.init = function() {
    return this.setup();
  };

  OwlCarouselList.prototype.setup = function() {
    this.el.target.owlCarousel({
      slideSpeed: 300,
      paginationSpeed: 800,
      singleItem: true,
      paginationNumbers: true
    });
  };

  return OwlCarouselList;

})(MLP.apps.MLPModule);

$.mlpPlugin(OwlCarouselList, 'OwlCarouselList', true);

var OwlCarouselPopup,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OwlCarouselPopup = (function(superClass) {
  var removeBtn;

  extend(OwlCarouselPopup, superClass);

  function OwlCarouselPopup() {
    return OwlCarouselPopup.__super__.constructor.apply(this, arguments);
  }

  OwlCarouselPopup.prototype.init = function() {
    return this.setup();
  };

  OwlCarouselPopup.prototype.setup = function() {
    this.el.target.owlCarousel({
      navigation: true,
      navigationText: ["", ""],
      slideSpeed: 300,
      paginationSpeed: 800,
      singleItem: true,
      rewindNav: false,
      pagination: false,
      addClassActive: true,
      afterMove: removeBtn,
      startDragging: removeBtn,
      afterInit: removeBtn,
      afterUpdate: removeBtn
    });
  };

  removeBtn = function() {
    var eventNextBtn, eventPrevBtn, photoNextBtn, photoPrevBtn;
    eventPrevBtn = $('.c-events__popup--slider .owl-buttons .owl-prev');
    eventNextBtn = $('.c-events__popup--slider .owl-buttons .owl-next');
    photoPrevBtn = $('.c-photo__popup--slider .owl-buttons .owl-prev');
    photoNextBtn = $('.c-photo__popup--slider .owl-buttons .owl-next');
    if ($('.c-events__popup--slider .owl-wrapper .owl-item:first-child').hasClass('active')) {
      eventPrevBtn.css('display', 'none');
    } else {
      eventPrevBtn.css('display', 'block');
    }
    if ($('.c-events__popup--slider .owl-wrapper .owl-item:last-child').hasClass('active')) {
      eventNextBtn.css('display', 'none');
    } else {
      eventNextBtn.css('display', 'block');
    }
    if ($('.c-photo__popup--slider .owl-wrapper .owl-item:first-child').hasClass('active')) {
      photoPrevBtn.css('display', 'none');
    } else {
      photoPrevBtn.css('display', 'block');
    }
    if ($('.c-photo__popup--slider .owl-wrapper .owl-item:last-child').hasClass('active')) {
      return photoNextBtn.css('display', 'none');
    } else {
      return photoNextBtn.css('display', 'block');
    }
  };

  return OwlCarouselPopup;

})(MLP.apps.MLPModule);

$.mlpPlugin(OwlCarouselPopup, 'OwlCarouselPopup', true);

var OwlCarousel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

OwlCarousel = (function(superClass) {
  extend(OwlCarousel, superClass);

  function OwlCarousel() {
    return OwlCarousel.__super__.constructor.apply(this, arguments);
  }

  OwlCarousel.prototype.init = function() {
    return this.setup();
  };

  OwlCarousel.prototype.setup = function() {
    this.el.target.owlCarousel({
      navigation: true,
      navigationText: ["", ""],
      slideSpeed: 300,
      paginationSpeed: 800,
      singleItem: true
    });
  };

  return OwlCarousel;

})(MLP.apps.MLPModule);

$.mlpPlugin(OwlCarousel, 'OwlCarousel', true);

var ScrollLoad,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ScrollLoad = (function(superClass) {
  extend(ScrollLoad, superClass);

  function ScrollLoad() {
    return ScrollLoad.__super__.constructor.apply(this, arguments);
  }

  ScrollLoad.prototype.init = function() {
    return this.setup();
  };

  ScrollLoad.prototype.setup = function() {
    var $scrollBlock, $window, _this;
    _this = this;
    $scrollBlock = this.el.target;
    $window = $(window);
    return $scrollBlock.each(function() {
      var $el, scrollAnimate;
      $el = $(this);
      scrollAnimate = function() {
        if ($window.width() > 750 && $window.scrollTop() + $window.height() > $el.offset().top + 200) {
          $window.unbind('scroll', scrollAnimate);
          $el.addClass('active');
        }
      };
      $window.bind('scroll', scrollAnimate);
    });
  };

  return ScrollLoad;

})(MLP.apps.MLPModule);

$.mlpPlugin(ScrollLoad, 'ScrollLoad', true);



var WeChat,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

WeChat = (function(superClass) {
  extend(WeChat, superClass);

  function WeChat() {
    return WeChat.__super__.constructor.apply(this, arguments);
  }

  WeChat.prototype.init = function() {
    WeChat.__super__.init.call(this);
    this.el.qrBtn = $('.c-nav__share-wechat');
    return this.events();
  };

  WeChat.prototype.events = function() {
    var _this;
    _this = this;
    this.el.qrBtn.click(function() {
      return $('.c-wechat').addClass('is-active');
    });
    return $('.c-wechat').click(function() {
      return $('.c-wechat').removeClass('is-active');
    });
  };

  return WeChat;

})(MLP.apps.MLPModule);

$.mlpPlugin(WeChat, 'WeChat', true);
